{"version":3,"sources":["frame_anim.js"],"names":["cc","Class","extends","Component","properties","sprite_frames","default","type","SpriteFrame","duration","loop","play_onload","onLoad","s_com","node","getComponent","Sprite","addComponent","sprite","is_playing","play_time","is_loop","end_func","spriteFrame","play_once","play_loop","stop_anim","start","update","dt","index","Math","floor","length"],"mappings":";;;;;;AAAAA,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,uBAAgB;AACZC,qBAAS,EADG;AAEZC,kBAAMP,GAAGQ;AAFG,SAXR;;AAgBRC,kBAAU,GAhBF,EAgBO;AACfC,cAAM,KAjBE,EAiBK;AACbC,qBAAa,KAlBL,CAkBY;AAlBZ,KAHP;;AAwBL;AACAC,YAAQ,kBAAY;AAChB;AACA,YAAIC,QAAQ,KAAKC,IAAL,CAAUC,YAAV,CAAuBf,GAAGgB,MAA1B,CAAZ;AACA,YAAI,CAACH,KAAL,EAAY;AAAE;AACVA,oBAAQ,KAAKC,IAAL,CAAUG,YAAV,CAAuBjB,GAAGgB,MAA1B,CAAR;AACH;AACD,aAAKE,MAAL,GAAcL,KAAd,CANgB,CAMK;AACrB;AACA,aAAKM,UAAL,GAAkB,KAAlB,CARgB,CAQS;AACzB,aAAKC,SAAL,GAAiB,CAAjB;AACA,aAAKC,OAAL,GAAe,KAAf;AACA,aAAKC,QAAL,GAAgB,IAAhB;;AAEA;AACA,YAAI,KAAKX,WAAT,EAAsB;AACjB,iBAAKO,MAAL,CAAYK,WAAZ,GAA0B,KAAKlB,aAAL,CAAmB,CAAnB,CAA1B;AACD,gBAAI,CAAC,KAAKK,IAAV,EAAgB;AACZ,qBAAKc,SAAL,CAAe,IAAf;AACH,aAFD,MAGK;AACD,qBAAKC,SAAL;AACH;AACJ;AACJ,KAhDI;;AAkDL;AACAD,eAAW,mBAASF,QAAT,EAAmB;AAC1B,aAAKF,SAAL,GAAiB,CAAjB;AACA,aAAKD,UAAL,GAAkB,IAAlB;AACA,aAAKE,OAAL,GAAe,KAAf;AACA,aAAKC,QAAL,GAAgBA,QAAhB;AACH,KAxDI;AAyDL;;AAEA;AACAG,eAAW,qBAAW;AAClB,aAAKL,SAAL,GAAiB,CAAjB;AACA,aAAKD,UAAL,GAAkB,IAAlB;AACA,aAAKE,OAAL,GAAe,IAAf;AACH,KAhEI;AAiEL;;AAEAK,eAAW,qBAAW;AAClB,aAAKN,SAAL,GAAiB,CAAjB;AACA,aAAKD,UAAL,GAAkB,KAAlB;AACA,aAAKE,OAAL,GAAe,KAAf;AACH,KAvEI;;AAyELM,WAAO,iBAAW,CAEjB,CA3EI;;AA6EL;AACA;AACAC,YAAQ,gBAAUC,EAAV,EAAc;AAClB,YAAI,KAAKV,UAAL,KAAoB,KAAxB,EAA+B;AAAE;AAC7B;AACH;;AAID,aAAKC,SAAL,IAAkBS,EAAlB,CAPkB,CAOI;;AAEvB;AACA;AACA;;AAEC,YAAIC,QAAQC,KAAKC,KAAL,CAAW,KAAKZ,SAAL,GAAiB,KAAKX,QAAjC,CAAZ,CAbkB,CAasC;AACxD;AACA,YAAI,KAAKY,OAAL,KAAiB,KAArB,EAA4B;AAAE;AAC1B,gBAAIS,SAAS,KAAKzB,aAAL,CAAmB4B,MAAhC,EAAwC;AAAE;AACtC;AACA,qBAAKf,MAAL,CAAYK,WAAZ,GAA0B,KAAKlB,aAAL,CAAmB,KAAKA,aAAL,CAAmB4B,MAAnB,GAA4B,CAA/C,CAA1B;AACA;AACA,qBAAKd,UAAL,GAAkB,KAAlB;AACA,qBAAKC,SAAL,GAAiB,CAAjB;AACA,oBAAI,KAAKE,QAAT,EAAmB;AAAE;AACjB,yBAAKA,QAAL;AACH;AACD;AACH,aAVD,MAWK;AACD,qBAAKJ,MAAL,CAAYK,WAAZ,GAA0B,KAAKlB,aAAL,CAAmByB,KAAnB,CAA1B;AACH;AACJ,SAfD,MAgBK;AAAE;;AAEH,mBAAOA,SAAS,KAAKzB,aAAL,CAAmB4B,MAAnC,EAA2C;AACvCH,yBAAS,KAAKzB,aAAL,CAAmB4B,MAA5B;AACA,qBAAKb,SAAL,IAAmB,KAAKX,QAAL,GAAgB,KAAKJ,aAAL,CAAmB4B,MAAtD;AACH;;AAED;AACA,iBAAKf,MAAL,CAAYK,WAAZ,GAA0B,KAAKlB,aAAL,CAAmByB,KAAnB,CAA1B;AACA;AACH;AACJ;AAzHI,CAAT","file":"frame_anim.js","sourceRoot":"../../../../assets/scripts","sourcesContent":["cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //    default: null,      // The default value will be used only when the component attaching\r\n        //                           to a node for the first time\r\n        //    url: cc.Texture2D,  // optional, default is typeof default\r\n        //    serializable: true, // optional, default is true\r\n        //    visible: true,      // optional, default is true\r\n        //    displayName: 'Foo', // optional\r\n        //    readonly: false,    // optional, default is false\r\n        // },\r\n        // ...\r\n        sprite_frames : {\r\n            default: [],\r\n            type: cc.SpriteFrame,\r\n        },\r\n        \r\n        duration: 0.1, // 帧的时间间隔\r\n        loop: false, // 是否循环播放\r\n        play_onload: false, // 是否在组件加载的时候播放;\r\n    },\r\n\r\n    // use this for initialization\r\n    onLoad: function () {\r\n        // 判断一下在组件所挂在的节点上面有没有cc.Sprite组件；\r\n        var s_com = this.node.getComponent(cc.Sprite);\r\n        if (!s_com) { // 没有cc.Sprite组件，要显示图片一定要有cc.Sprite组件,所以我们添加一个cc.Sprite组件;\r\n            s_com = this.node.addComponent(cc.Sprite);\r\n        }\r\n        this.sprite = s_com; // 精灵组件\r\n        // end \r\n        this.is_playing = false; // 是否正在播放;\r\n        this.play_time = 0;\r\n        this.is_loop = false;\r\n        this.end_func = null;\r\n        \r\n        // 显示第0个frame;\r\n        if (this.play_onload) {\r\n             this.sprite.spriteFrame = this.sprite_frames[0];\r\n            if (!this.loop) {\r\n                this.play_once(null);    \r\n            }\r\n            else {\r\n                this.play_loop();\r\n            }\r\n        }\r\n    },\r\n    \r\n    // 实现播放一次,\r\n    play_once: function(end_func) {\r\n        this.play_time = 0;\r\n        this.is_playing = true;\r\n        this.is_loop = false;\r\n        this.end_func = end_func;\r\n    }, \r\n    // end \r\n    \r\n    // 实现循环播放\r\n    play_loop: function() {\r\n        this.play_time = 0;\r\n        this.is_playing = true;\r\n        this.is_loop = true;\r\n    },\r\n    // end \r\n    \r\n    stop_anim: function() {\r\n        this.play_time = 0;\r\n        this.is_playing = false;\r\n        this.is_loop = false;\r\n    }, \r\n    \r\n    start: function() {\r\n        \r\n    },\r\n    \r\n    // called every frame, uncomment this function to activate update callback\r\n    // 每一次刷新的时候需要调用的函数，dt距离上一次刷新过去的时间;\r\n    update: function (dt) {\r\n        if (this.is_playing === false) { // 没有启动播放，不做处理\r\n            return;\r\n        }\r\n        \r\n        \r\n        \r\n        this.play_time += dt; // 累积我们播放的时间;\r\n        \r\n       // 计算时间，应当播放第几帧，而不是随便的下一帧，\r\n       // 否则的话，同样的动画1, 60帧，你在30FPS的机器上你会播放2秒，\r\n       // 你在60FPS的机器上你会播放1秒，动画就不同步;\r\n       \r\n        var index = Math.floor(this.play_time / this.duration); // 向下取整数\r\n        // index\r\n        if (this.is_loop === false) { // 播放一次\r\n            if (index >= this.sprite_frames.length) { // 非循环播放结束\r\n                // 精灵显示的是最后一帧;\r\n                this.sprite.spriteFrame = this.sprite_frames[this.sprite_frames.length - 1];\r\n                // end \r\n                this.is_playing = false;\r\n                this.play_time = 0;\r\n                if (this.end_func) { // 调用回掉函数\r\n                    this.end_func();\r\n                }\r\n                return;\r\n            }\r\n            else {\r\n                this.sprite.spriteFrame = this.sprite_frames[index];\r\n            }\r\n        }\r\n        else { // 循环播放;\r\n            \r\n            while (index >= this.sprite_frames.length) {\r\n                index -= this.sprite_frames.length;\r\n                this.play_time -= (this.duration * this.sprite_frames.length);\r\n            }\r\n            \r\n            //  在合法的范围之内\r\n            this.sprite.spriteFrame = this.sprite_frames[index];\r\n            // end \r\n        }\r\n    },\r\n});\r\n"]}